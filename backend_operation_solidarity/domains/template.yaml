AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    Environment:
      Variables:
        USERS_TABLE: !Ref UsersTable
        ASSIGNMENTS_TABLE: !Ref AssignmentsTable
        TASKS_TABLE: !Ref TasksTable

Resources:
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  # API GW
  SolidarityApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev

  # Lambda Functions for Users Start
  PostUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.postUserHandler
      CodeUri: users/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users
            Method: post

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getUserHandler
      CodeUri: users/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users/{UserId}
            Method: get

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.updateUsersHandler
      CodeUri: users/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        UpdateUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users/{UserId}
            Method: put

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.deleteUserHandler
      CodeUri: users/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        DeleteUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users/{UserId}
            Method: delete

  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.listUsersHandler
      CodeUri: users/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        ListUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users
            Method: get
  # Assignment Resources
  # DynamoDB Tables
  AssignmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Assignments
      AttributeDefinitions:
        - AttributeName: assignmentId
          AttributeType: S
      KeySchema:
        - AttributeName: assignmentId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Functions for Assignments Start
  PostAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.postAssignmentHandler
      CodeUri: assignments/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostVolunteer:
          Type: HttpApi
          Properties:
            Path: /assignments
            Method: post
            ApiId: !Ref SolidarityApi
  GetAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getAssignmentHandler
      CodeUri: assignments/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetVolunteer:
          Type: HttpApi
          Properties:
            Path: /assignments/{AssignmentsId}
            Method: get
            ApiId: !Ref SolidarityApi

  UpdateAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.updateAssignmentsHandler
      CodeUri: assignments/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        UpdateVolunteer:
          Type: HttpApi
          Properties:
            Path: /assignments/{AssignmentsId}
            Method: put
            ApiId: !Ref SolidarityApi

  DeleteAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.deleteAssignmentHandler
      CodeUri: assignments/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        DeleteVolunteer:
          Type: HttpApi
          Properties:
            Path: /assignments/{AssignmentsId}
            Method: delete
            ApiId: !Ref SolidarityApi

  ListAssignmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.listAssignmentsHandler
      CodeUri: assignments/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        Listvolunteers:
          Type: HttpApi
          Properties:
            Path: /assignments
            Method: get
            ApiId: !Ref SolidarityApi

  # Tasks Resources
  # DynamoDB Tables
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tasks
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Functions for Tasks Start
  PostTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.postTaskHandler
      CodeUri: tasks/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostVolunteer:
          Type: HttpApi
          Properties:
            Path: /tasks
            Method: post
            ApiId: !Ref SolidarityApi

  GetTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getTaskHandler
      CodeUri: tasks/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetVolunteer:
          Type: HttpApi
          Properties:
            Path: /tasks/{TaskId}
            Method: get
            ApiId: !Ref SolidarityApi

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.listTasksHandler
      CodeUri: tasks/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        UpdateVolunteer:
          Type: HttpApi
          Properties:
            Path: /tasks/{TaskId}
            Method: put
            ApiId: !Ref SolidarityApi

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.deleteTaskHandler
      CodeUri: tasks/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        DeleteVolunteer:
          Type: HttpApi
          Properties:
            Path: /tasks/{TaskId}
            Method: delete
            ApiId: !Ref SolidarityApi

  ListTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.listTasksHandler
      CodeUri: tasks/code/
      Policies: AmazonDynamoDBFullAccess
      Events:
        Listvolunteers:
          Type: HttpApi
          Properties:
            Path: /tasks
            Method: get
            ApiId: !Ref SolidarityApi

  # Lambda Functions for Users End
Outputs:
  ApiURL:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${SolidarityApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  # ApiId:
  #   Description: The ID of the shared HTTP API
  #   Value:
  #     Fn::GetAtt:
  #       - SolidarityApi
  #       - ApiId
  #   Export:
  #     Name: Shared-HttpApi-ApiId
