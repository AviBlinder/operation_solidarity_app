AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
# unified template
Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    Environment:
      Variables:
        USERS_TABLE: !Ref UsersTable
        ASSIGNMENTS_TABLE: !Ref AssignmentsTable
        TASKS_TABLE: !Ref TasksTable

Resources:
  CognitoUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: SolidarityOperationUserPool
      AutoVerifiedAttributes:
        - email
  CognitoUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: SolidarityOperationUserPoolClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH

  CognitoUserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      Domain: 'operation-solidarity-unite-domain'
      UserPoolId: !Ref CognitoUserPool

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      # email-index GSI
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
  # API GW
  SolidarityApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref CognitoUserPoolClient
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}

  # Lambda Functions for Users Start
  PostUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.postUserHandler
      CodeUri: users/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        PostUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getUserHandler
      CodeUri: users/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        GetUserByUserId:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users/{userId}
            Method: get
  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.updateUsersHandler
      CodeUri: users/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        UpdateUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users/{userId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.deleteUserHandler
      CodeUri: users/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        DeleteUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users/{userId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.listUsersHandler
      CodeUri: users/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        ListUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref SolidarityApi
            Path: /users
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # Assignment Resources
  # DynamoDB Tables
  AssignmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Assignments
      AttributeDefinitions:
        - AttributeName: assignmentId
          AttributeType: S
      KeySchema:
        - AttributeName: assignmentId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Functions for Assignments Start
  PostAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.postAssignmentHandler
      CodeUri: assignments/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentsTable
      Events:
        PostAssignment:
          Type: HttpApi
          Properties:
            Path: /assignments
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
            ApiId: !Ref SolidarityApi
  GetAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getAssignmentHandler
      CodeUri: assignments/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentsTable
      Events:
        GetAssignment:
          Type: HttpApi
          Properties:
            Path: /assignments/{AssignmentsId}
            Method: get
            ApiId: !Ref SolidarityApi
  UpdateAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.updateAssignmentsHandler
      CodeUri: assignments/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentsTable
      Events:
        UpdateAssignment:
          Type: HttpApi
          Properties:
            Path: /assignments/{AssignmentsId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
            ApiId: !Ref SolidarityApi
  DeleteAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.deleteAssignmentHandler
      CodeUri: assignments/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentsTable
      Events:
        DeleteAssignment:
          Type: HttpApi
          Properties:
            Path: /assignments/{AssignmentsId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
            ApiId: !Ref SolidarityApi

  ListAssignmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.listAssignmentsHandler
      CodeUri: assignments/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssignmentsTable
      Events:
        ListAssignment:
          Type: HttpApi
          Properties:
            Path: /assignments
            Method: get
            ApiId: !Ref SolidarityApi

  # Tasks Resources
  # DynamoDB Tables
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tasks
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        - AttributeName: entryDate
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: emailtaskType
          AttributeType: S
        - AttributeName: statustaskType
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
        - AttributeName: entryDate
          KeyType: RANGE
      #GSI 1: email + entryDate
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
            - AttributeName: entryDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        #GSI 2:  email#taskType + entryDate
        - IndexName: email-taskType-index
          KeySchema:
            - AttributeName: emailtaskType
              KeyType: HASH
            - AttributeName: entryDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        #GSI 3:  status + entryDate
        - IndexName: status-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: entryDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        #GSI 4:  statustaskType + entryDate
        - IndexName: statustaskType-index
          KeySchema:
            - AttributeName: statustaskType
              KeyType: HASH
            - AttributeName: entryDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        # GSI addition end
      BillingMode: PAY_PER_REQUEST

  # Lambda Functions for Tasks Start
  PostTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.postTaskHandler
      CodeUri: tasks/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        PostTask:
          Type: HttpApi
          Properties:
            Path: /tasks
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
            ApiId: !Ref SolidarityApi
  GetTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getTaskHandler
      CodeUri: tasks/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        GetTask:
          Type: HttpApi
          Properties:
            # Path: /tasks/{TaskId}
            Path: /tasks/{TaskId}/{EntryDate}
            Method: get
            ApiId: !Ref SolidarityApi
  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.updateTaskHandler
      CodeUri: tasks/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        UpdateTask:
          Type: HttpApi
          Properties:
            Path: /tasks/{TaskId}/{EntryDate}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
            ApiId: !Ref SolidarityApi
  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.deleteTaskHandler
      CodeUri: tasks/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        DeleteTask:
          Type: HttpApi
          Properties:
            Path: /tasks/{TaskId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
            ApiId: !Ref SolidarityApi
  ListTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.listTasksHandler
      CodeUri: tasks/code/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        ListTask:
          Type: HttpApi
          Properties:
            Path: /tasks
            Method: get
            ApiId: !Ref SolidarityApi

  # Lambda Functions for Users End
Outputs:
  ApiURL:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${SolidarityApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
